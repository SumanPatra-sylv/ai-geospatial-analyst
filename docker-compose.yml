services:
  # Redis service for Celery message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # MinIO service for object storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API service (FastAPI)
  api:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      - redis
      - minio
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - ./src:/app/src
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker service
  worker:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    command: ["celery", "-A", "src.worker.celery_app", "worker", "--loglevel=info", "--concurrency=2"]
    networks:
      - app-network
    depends_on:
      - redis
      - minio
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - ./src:/app/src

  # Celery Beat service (scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    networks:
      - app-network
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./src:/app/src
      - celery_beat_data:/app/celery
    command: [
      "celery", "-A", "src.worker.celery_app", "beat", 
      "--loglevel=info",
      "--schedule=/app/celery/celerybeat-schedule"
    ]
    healthcheck:
      test: ["CMD", "test", "-f", "/app/celery/celerybeat-schedule"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit frontend service
  frontend:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    ports:
      - "8501:8501"
    networks:
      - app-network
    depends_on:
      - api
    environment:
      - API_BASE_URL=http://api:8000
    volumes:
      - ./src:/app/src
    # --- THIS IS THE FIX ---
    # The path now correctly points to your Streamlit app in the 'ui' directory.
    command: ["streamlit", "run", "src/ui/app.py", "--server.port=8501", "--server.address=0.0.0.0"]

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - app-network
    volumes:
      - ./deployment/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

volumes:
  redis_data:
  minio_data:
  celery_beat_data:
  prometheus_data:

networks:
  app-network:
    driver: bridge