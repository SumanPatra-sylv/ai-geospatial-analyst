# docker-compose.yml - UPDATED AND REFACTORED FOR 'src' LAYOUT

# Define a single network for all services to communicate on
networks:
  app-network:
    driver: bridge

services:
  # --- INFRASTRUCTURE SERVICES ---
  
  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  postgres:
    image: "postgis/postgis:16-3.4"
    env_file: .env # Use .env file for credentials
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  minio:
    image: "minio/minio:latest"
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Console port
    env_file: .env # Use .env file for credentials
    volumes:
      - minio_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s # Give MinIO time to initialize
    restart: unless-stopped

  # --- APPLICATION SERVICES ---

  api:
    build:
      context: .
      # [FIXED] Path to Dockerfile updated
      dockerfile: deployment/docker/Dockerfile.api
    # [FIXED] Command updated to use 'src' package
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    # [FIXED] Volume mount updated to map the 'src' directory
    volumes:
      - ./src:/app/src
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file: .env
    healthcheck:
      # [FIXED] Health check now points to the reliable /docs endpoint
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  worker:
    build:
      context: .
      # [FIXED] Path to Dockerfile updated
      dockerfile: deployment/docker/Dockerfile.worker
    # [FIXED] Command updated to use 'src' package
    command: celery -A src.worker.celery_app.celery worker --loglevel=info --autoscale=10,2
    # [FIXED] Volume mount updated to map the 'src' directory
    volumes:
      - ./src:/app/src
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped

  celery-beat:
    build:
      context: .
      # [FIXED] Path to Dockerfile updated
      dockerfile: deployment/docker/Dockerfile.worker
    # [FIXED] Command updated to use 'src' package
    command: celery -A src.worker.celery_app.celery beat --loglevel=info -s /tmp/celerybeat-schedule
    # [FIXED] Volume mount updated to map the 'src' directory
    volumes:
      - ./src:/app/src
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped

  # --- MONITORING SERVICES ---
  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    # [FIXED] Path to prometheus config updated
    volumes:
      - ./deployment/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped

# Define persistent volumes
volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data: