# The worker needs the exact same environment as the API
FROM python:3.11-slim

# Set the working directory to the root of our application
WORKDIR /app

# Install system dependencies needed for geospatial libraries
# This layer is cached as long as this command doesn't change
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    build-essential \
    libgdal-dev \
    # Clean up apt-get cache to keep image size small
    && rm -rf /var/lib/apt/lists/*

# Copy only the requirements file first to leverage Docker cache
COPY requirements.txt .

# Install dependencies. This layer is cached if requirements.txt doesn't change
RUN pip config set global.timeout 60 && \
    pip install \
        --no-cache-dir \
        --timeout=100 \
        -r requirements.txt

# [FIXED] Copy the entire 'src' directory instead of 'backend'
# This invalidates the cache when any file in 'src' changes
COPY ./src /app/src

# [VERIFIED] Set the Python path to the application root
# This allows imports like 'from src.worker.celery_app' to work correctly
ENV PYTHONPATH="/app:${PYTHONPATH}"

# Create a non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# [FIXED] Default command now correctly references the 'src' package
# Note: This is a default and will be overridden by the command in docker-compose.yml
CMD ["celery", "-A", "src.worker.celery_app", "worker", "--loglevel=info"]